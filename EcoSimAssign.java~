/* [EcoSimAssign.java]
 * Ecosystem simulator assignment
 * @author Albert Quon
 * 05/02/2018
 */
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Random;

// check strange behaviour
// Organize code into methods
// Fix formatting of code for standards


class EcoSimAssign {
  
  /** 
   * Main method
   * @param arguments
   */
  public static void main(String[] args) { 
    
    Object map[][] = new Object[25][25];
    Scanner keyInput = new Scanner(System.in);
    Boolean extinction = false;
    int initialSheep, initialWolf, initialPlant, initialWHealth, initialSHealth;
    int day = 0, rain;
    Boolean toRain = false;
    
    System.out.println("Enter the amount of wolves (Recommended: 60)");
    initialWolf = keyInput.nextInt();
    System.out.println("Enter the amount of sheep (Recommended: 40)");
    initialSheep = keyInput.nextInt();
    System.out.println("Enter the amount of plants (Recommended: 50)");
    initialPlant = keyInput.nextInt();
    System.out.println("Enter the initial health for wolves (Recommended: 15)");
    initialWHealth = keyInput.nextInt();
    System.out.println("Enter the initial health for sheeps (Recommended: 15)");
    initialSHealth = keyInput.nextInt();

    keyInput.close();
    // Initialize Map
    generateMap(map, initialWolf, initialSheep, initialPlant, initialWHealth, initialSHealth);
   
    
    //Set up Grid Panel
    DisplayGrid grid = new DisplayGrid(map);
    
    //Display the grid on a Panel
    grid.refresh();
    
    
    //Small delay
    while(extinction != true) {
      try{ Thread.sleep(1500); }catch(Exception e) {};
      day++;
      grid.setRain(false);
      toRain = false;
      // Initialize Map (Making changes to map)
      Random rainChance = new Random();
      rain = rainChance.nextInt(5);
      if (rain == 1) {
        grid.setRain(true);
        toRain = true;
      }
      startNewDay(map);
      extinction = advanceTime(map, toRain);
      System.out.println("rain:" + toRain);
      grid.refresh();
      System.out.println("Day: " + day);
      //Display the grid on a Panel
    }
    System.out.println("Extinction!");
  }
  
  
  /**
   * Randomly generates a map
   * @param Object array of the map, the initial amounts of wolves, sheep, plants, wolf health, and sheep health
   */
  public static void generateMap(Object[][] map, int initWolf, int initSheep, int initPlant, int wolfHP, int sheepHP) { 
    int origWolf;
    int origSheep;
    int origPlant;
    do { // keeps randoming generating the map until all animals are placed
      origWolf = initWolf;
      origSheep = initSheep;
      origPlant = initPlant;
      for(int i = 0; i<map[0].length;i++) {       
        for(int j = 0; j<map.length;j++) 
        { 
          int organism = 1 + ((int)(Math.random()* 23));
          if (organism < 3 && origWolf > 0) {
            map[i][j]= new Wolf(wolfHP, 2); 
            origWolf--;
          }
          else if (organism >= 3 && organism <= 7 && origSheep > 0) {
            map[i][j] = new Sheep(sheepHP, 2);
            origSheep--;
          }
          else if (organism > 7 && organism <= 11 && origPlant > 0) {
            map[i][j] = new Plant();
            origPlant--;
          } else {
            map[i][j] = null;
          }
        }
      }
      System.out.println(origPlant);
      System.out.println(origWolf);
      System.out.println(origSheep);
    } while(origSheep != 0 || origWolf != 0 || origPlant != 0);
    System.out.println(origPlant);
    System.out.println(origWolf);
    System.out.println(origSheep);
  }
  /** 
   * Copies an array from two 2-D arrays
   * @param 
   * @return Returns an object array
   */
  public static Object[] copyArray(Object[][] map, Object[][] mapCopy, int start, int end, int mapIndex, int mapCopyIndex, int startPara) {
    for (int i = start; i < end+1;i++) {
      mapCopy[mapCopyIndex][startPara] = map[mapIndex][i];
      startPara++;
    }
    return mapCopy[mapCopyIndex];
  }
  
  /** 
   * 
   * @param 
   * @return the finished object vision 2-D array that is 3x3
   */
  public static Object[][] visionArray(Object[][] origMap, Object[][] visionMap, int index, int indexB) {
    if (index == 0) {
      
      if (indexB == 0){
        visionMap[1] = copyArray(origMap, visionMap, indexB, indexB+1, index, 1, 1);
        visionMap[2] = copyArray(origMap, visionMap, indexB, indexB+1, index+1, 2, 1);
      }
      else if (indexB >= origMap[0].length-1) {
        visionMap[1] = copyArray(origMap, visionMap, indexB-1, indexB, index, 1, 0);
        visionMap[2] = copyArray(origMap, visionMap, indexB-1, indexB, index+1, 2, 0);
      }else {
        visionMap[1] = copyArray(origMap, visionMap, indexB-1, indexB+1, index, 1, 0);
        visionMap[2] = copyArray(origMap, visionMap, indexB-1, indexB+1, index+1, 2, 0);
      }
    }
    else if (index >= origMap[0].length-1) {
      
      if (indexB == 0){
        visionMap[0] = copyArray(origMap, visionMap, indexB, indexB+1, index-1, 0, 1);
        visionMap[1] = copyArray(origMap, visionMap, indexB, indexB+1, index, 1, 1);
      }
      else if (indexB >= origMap[0].length-1) {
        visionMap[0] = copyArray(origMap, visionMap, indexB-1, indexB, index-1, 0, 0);
        visionMap[1] = copyArray(origMap, visionMap, indexB-1, indexB, index, 1, 0);
      }else{
        visionMap[0] = copyArray(origMap, visionMap, indexB-1, indexB+1, index-1, 0, 0);
        visionMap[1] = copyArray(origMap, visionMap, indexB-1, indexB+1, index, 1, 0);
      }
      
    }else {
      
      if (indexB == 0){
        visionMap[0] = copyArray(origMap, visionMap, indexB, indexB+1, index-1, 0, 1);
        visionMap[1] = copyArray(origMap, visionMap, indexB, indexB+1, index, 1, 1);
        visionMap[2] = copyArray(origMap, visionMap, indexB, indexB+1, index+1, 2, 1);
      }
      else if (indexB >= origMap[0].length-1) {
        visionMap[0] = copyArray(origMap, visionMap, indexB-1, indexB, index-1, 0, 0);
        visionMap[1] = copyArray(origMap, visionMap, indexB-1, indexB, index, 1, 0);
        visionMap[2] = copyArray(origMap, visionMap, indexB-1, indexB, index+1, 2, 0);
      }else{
        visionMap[0] = copyArray(origMap, visionMap, indexB-1, indexB+1, index-1, 0, 0);
        visionMap[1] = copyArray(origMap, visionMap, indexB-1, indexB+1, index, 1, 0);
        visionMap[2] = copyArray(origMap, visionMap, indexB-1, indexB+1, index+1, 2, 0);
      }
    }
    return visionMap;
  }
  /**
   * This method
   * @para
   * @return
   */
  public static void startNewDay(Object[][] map) {
    for (int i = 0; i < map[0].length; i++) {
      for (int j = 0; j < map[0].length; j++) {
        if (map[i][j] instanceof Plant) {
          ((Organism)map[i][j]).setHealth(((Organism)map[i][j]).getHealth() - 3);
        }
        if (map[i][j] instanceof Animal) {
          ((Animal)map[i][j]).setStamina(((Animal)map[i][j]).getStamina()+2);
          ((Animal)map[i][j]).setAge(((Animal)map[i][j]).getAge()+1);
          System.out.println(((Animal)map[i][j]).getDisease());
          System.out.println(map[i][j]);
          if (map[i][j] instanceof Wolf) {
            ((Animal)map[i][j]).setStamina(((Animal)map[i][j]).getStamina()+1);
          }
          if (((Animal)map[i][j]).getDisease()) {
            ((Animal)map[i][j]).setHealth(((Animal)map[i][j]).getHealth()-4);
          }
          if (((Animal)map[i][j]).getAge() > 12 && ((Animal)map[i][j]).getAge() <= 20) {
            ((Animal)map[i][j]).setStamina(((Animal)map[i][j]).getStamina()+1);
            ((Animal)map[i][j]).setHealth(((Animal)map[i][j]).getHealth()-12); // health problems
          }
          else if (((Animal)map[i][j]).getAge() > 20) {
            map[i][j] = null;
          }
        }
      }
    }
  }
  
  /**
   * This method
   * @para
   * @return
   */
  public static Boolean advanceTime(Object[][] map, Boolean raining) {
    int decision, wolfCount = 0, sheepCount = 0, grassChance;
    Random rand = new Random();
    Object[][] moveMap = new Object[3][3];
    ArrayList<Object> wolves = new ArrayList<Object>(); 
    ArrayList<Object> sheeps = new ArrayList<Object>();
    for (int i = 0; i < map[0].length; i++) {
      for (int j = 0; j < map[0].length; j++) {
        
        if (map[i][j] == null) {
          if (raining = true) {
            grassChance = rand.nextInt(10);
          } else {
            grassChance = rand.nextInt(100);
          }
          if (grassChance == 1) {
            map[i][j] = new Plant();
            grassChance = rand.nextInt(5); 
            if (grassChance > 3) {
              ((Organism)map[i][j]).setDisease(true);
            }
          }
          
        }
        else if (map[i][j] instanceof Animal) {
          
          if (map[i][j] instanceof Wolf && !wolves.contains(map[i][j]) && ((Animal)map[i][j]).getAge() > 0) {
            wolves.add(map[i][j]); //add new wolves that are not new born and have not been recorded already
          }
          else if (map[i][j] instanceof Sheep && !sheeps.contains(map[i][j]) && ((Animal)map[i][j]).getAge() > 0) {
            sheeps.add(map[i][j]); //add new sheep that are not new born and have not been recorded already
          }
          
          //create a 3x3 array
          visionArray(map, moveMap, i, j);
          if (((Animal)map[i][j]).getHealth() <= 0) {
            map[i][j] = null;
          }
          else if (((Animal)map[i][j]).getStamina() > 0) {
            decision = ((Animal)map[i][j]).move(moveMap); //insert array into move method
            //for decisions that are randomized
            if (decision == 1 && i < map[0].length-1/* && map[i+1][j] == null*/) { // add brackets for conditions
              map[i+1][j] = map[i][j]; //System.out.println("d");
              map[i][j] = null;
            }
            else if (decision == 2 && i > 0 /* && map[i-1][j] == null*/) {
              map[i-1][j] = map[i][j]; //System.out.println("u");
              map[i][j] = null;
            }
            else if (decision == 3 && j < map[0].length-1 /* && map[i][j+1] == null*/) {
              map[i][j+1] = map[i][j]; //System.out.println("r");
              map[i][j] = null;
            }
            else if (decision == 4 && j > 0 /* && map[i][j-1] == null*/) {
              map[i][j-1] = map[i][j]; //System.out.println("l");
              map[i][j] = null;
            }
            // for specific decisions after interaction
            else if (decision == 5 && i < map[0].length-1) { // add brackets for conditions
              map[i+1][j] = map[i][j]; //System.out.println("d");
              map[i][j] = null;
            }
            else if (decision == 6 && i > 0) {
              map[i-1][j] = map[i][j]; //System.out.println("u");
              map[i][j] = null;
            }
            else if (decision == 7 && j < map[0].length-1) {
              map[i][j+1] = map[i][j]; //System.out.println("r");
              map[i][j] = null;
            }
            else if (decision == 8 && j > 0) {
              map[i][j-1] = map[i][j]; //System.out.println("l");
              map[i][j] = null;
            }
            
            // for breeding purposes
            else if (decision == 9) {
              map = breedingGround(map, true);
              sheepCount++;
            }
            
            else if (decision == 10) {
              map = breedingGround(map, false);
              wolfCount++;
            }
            
          }
          
        } 
      }
    }
    wolfCount = wolves.size();
    sheepCount = sheeps.size();
    System.out.println("Sheep Count: " + sheepCount);
    System.out.println("Wolf Count: " + wolfCount);
    if ((sheepCount == 0) || (wolfCount == 0)) {
      return true;
    } else {
      return false;
    }
  }
  /**
   * 
   * 
   */
  public static Object[][] breedingGround(Object[][] currentMap, Boolean isSheep) {
    Random rand = new Random();
    int randX, randY;
    Boolean spawn = false;
    do {
      randX = rand.nextInt(currentMap[0].length);
      randY = rand.nextInt(currentMap[0].length);
      if (currentMap[randX][randY] == null) {
        spawn = true;
        System.out.println("new born");
        if (isSheep) {
          currentMap[randX][randY] = new Sheep();
        } 
        else if (isSheep == false){ 
          currentMap[randX][randY] = new Wolf();
        }
      }
    } while(currentMap[randX][randY] != null && spawn == false);
    
    return currentMap;
  }
}
